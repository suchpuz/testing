#include "ros/ros.h"
#include "std_msgs/String.h"
//#include <tf/transform_broadcaster.h>
#include <nav_msgs/Odometry.h>
 #include "sensor_msgs/LaserScan.h"
 #include <tf2/LinearMath/Quaternion.h>
 #include <tf2_ros/transform_broadcaster.h>
 #include <geometry_msgs/TransformStamped.h>
 #include <std_msgs/Int32.h>
#include <cstring>

class pub_sub
{

private:
double val;
ros::NodeHandle n; 
//tf::TransformBroadcaster br;
ros::Subscriber sub;
ros::Subscriber sub2;	
ros::Publisher pub2;
ros::Publisher pub;
nav_msgs::Odometry odom2;
public:
  	pub_sub(){
  	sub = n.subscribe("/t265/odom", 1000, &pub_sub::odom_callback, this);  //1000 è queue size
	pub = n.advertise<nav_msgs::Odometry>("/odom", 1);
	
	

}


}
void odom_callback(const nav_msgs::OdometryConstPtr& msg){
  //tf::Transform transform;
  ros::Rate rate(200);  //ho notato che il nodo pubblica a una velocità diversa da quella dell'odom del bagfile. Non so il motivo e non riesco a risolvere 
  			//neanche imponendo il rate (è più lento)
  ros::Time tempo = ros::Time::now(); 

  static tf2_ros::TransformBroadcaster br;
  geometry_msgs::TransformStamped odom;
  odom.header.stamp = msg->header.stamp;  //qui ho provato anche a usare ros::now() ma stesso risultato
  odom.header.frame_id = "odom";
  odom.child_frame_id = "base_link";      
 
  odom.transform.translation.x = msg->pose.pose.position.x;
  odom.transform.translation.y = msg->pose.pose.position.y;
  odom.transform.translation.z = msg->pose.pose.position.z;
  odom.transform.rotation.x = msg->pose.pose.orientation.x;
  odom.transform.rotation.y = msg->pose.pose.orientation.y;
  odom.transform.rotation.z = msg->pose.pose.orientation.z;
  odom.transform.rotation.w = msg->pose.pose.orientation.w;
  br.sendTransform(odom);

//qui ho provato a ripubblicare odom, ho provato a usare in gmapping sia questo topic che quello pubblicato dal bagfile ma stesso risultato 
  odom2.header.stamp = msg->header.stamp;
 // ROS_INFO_STREAM("  "<< msg->header.stamp<<"  ");
  odom2.header.frame_id = "odom";
  odom2.child_frame_id = "base_link";

  odom2.pose.pose.position.x = msg->pose.pose.position.x;
  odom2.pose.pose.position.y = msg->pose.pose.position.y;
  odom2.pose.pose.position.z = msg->pose.pose.position.z;

  odom2.pose.pose.orientation.x = msg->pose.pose.orientation.x;
  odom2.pose.pose.orientation.y = msg->pose.pose.orientation.x;
  odom2.pose.pose.orientation.z = msg->pose.pose.orientation.x;
  odom2.pose.pose.orientation.w = msg->pose.pose.orientation.x;
  pub.publish(odom2);
  rate.sleep();
}




};

int main(int argc, char **argv)
{
 	ros::init(argc, argv, "tf_publisher");
 	pub_sub my_pub_sub;
  
 	ros::spin();
 	return 0;
}
